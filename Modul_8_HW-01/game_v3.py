"""Game "Guess the number."
Computer randomly selects a number and guesses that number.
"""

import numpy as np


def predict(number: int = 1) -> int:
    """Guesses number

    Args:
        number (int, optional): Selected number. Defaults to 1.

    Returns:
        int: Number of attempts
    """
    count = 0
    
# Lowest and Highest limits where program is searching for selected number
    bottom_edge = 0 
    top_edge = 101

    while True:
        count += 1
# Middle value of the segment where selected number is searched        
        predict_number = int((top_edge + bottom_edge)/2)
#        print(predict_number)
        if predict_number == number :
            break  # Break cycle if selected number was found
        elif predict_number < number :
            bottom_edge = predict_number # Change the lowest limit of searching segment
        else:
            top_edge = predict_number # Change the highest limit of searching segment
#    print('count = ', count)
#    print('number = ', number)

    return count


def score_game(predict) -> int:
    """How many attempts does algorithm take to guess for 1000 numbers selected?
    
    Args:
        predict ([type]): guess function
    Returns:
        int: Maximal number of attempts in 1000 tries
    """
    count_ls = []    
    np.random.seed(5)  # Define seed for same set of numbers generated by np.random
    random_array = np.random.randint(1, 101, size=(1000))  # List of random numbers

    for number in random_array:
        count_ls.append(predict(number)) # List of attempts done to guess each number from random_array

    score = int(np.amax(count_ls))  # Maximal number of attempts from guessing 1000 random numbers
#    print(count_ls)
    print(f"Algorithm had found selected numbers in maximum :{score} attempts")
    return score


if __name__ == "__main__":
    # RUN
    score_game(predict)
